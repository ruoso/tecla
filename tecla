#!/usr/bin/perl

use strict;
use warnings;
use utf8;
use 5.01000;

# we shouldn't use SDL::Timer, because it starts a different thread,
# and the SDL binding doesn't take care of that...
use Time::HiRes;
use Event qw<loop unloop>;

use threads;
use threads::shared;

use SDL 2.3;
use SDL::Audio;
use SDL::AudioSpec;
use SDL::Color;
use SDL::App;
use SDL::Event;
use SDL::Events;
use SDL::Mouse;

use Audio::Data;

our $FPS = 40;
our $width = 1280;
our $height = 800;
our @objects;

# this is the message-passing array from
# the timer code to the audio code...
our @timer_to_audio :shared;

our $app = SDL::App->new
  ( -width => $width,
    -height => $height,
    -depth => 16,
    -resizeable => 1,
    -title => 'Tecla',
  #  -fullscreen => 1
  );

our $bg_color = SDL::Video::map_RGB($app->format(), 0, 0, 0);

SDL::Mouse::show_cursor(0);

my $thr = async {
  our $time = $app->ticks;
  our $sevent = SDL::Event->new;
  our $timer = Event->timer
    ( interval => (1/$FPS),
      cb => sub {
        my $oldtime = $time;
        my $now = $app->ticks;

        my @newobjects;
        while (SDL::Events::poll_event($sevent)) {
          my $type = $sevent->type;
          if ($type == SDL_QUIT()) {
            unloop;
          } elsif ($type == SDL_KEYDOWN() &&
                   $sevent->key_sym() == SDLK_ESCAPE) {
            unloop;
          } elsif ($type == SDL_KEYDOWN() &&
                   $sevent->key_sym() == SDLK_F11) {
            SDL::Video::wm_toggle_fullscreen($app);
          } elsif ($type == SDL_VIDEORESIZE()) {
            $app->resize($sevent->resize_w, $sevent->resize_h);
            $height = $app->height;
            $width = $app->width;
          } else {
            my $x = int(rand($width));
            my $y = int(rand($height));
            my $r = int(rand(255));
            my $g = int(rand(255));
            my $b = int(rand(255));
            my $s = int(rand(20))+20;
            my $t = int(rand(1700))+300;

            my $tone = int(rand(60))-30; # produce one octave higher and
            # one lower than the base
            my $freq = 2400 *             # start on A4
              ((2 ** (1/30)) ** $tone);  # formula took from:
            # http://www.phy.mtu.edu/~suits/NoteFreqCalcs.html

            push @newobjects, Tecla::Object->new
              ({ rect => SDL::Rect->new($x, $y, $s, $s),
                 start_color => SDL::Color->new($r, $g, $b),
                 started => $time,
                 duration => $t,
                 freq => $freq });
          }
        }


        my $rect = SDL::Rect->new(0, 0, $width, $height);

        SDL::Video::fill_rect($app, $rect, $bg_color);

        @objects = grep { $_->time_lapse($oldtime,$now) && $_->draw() } @objects, @newobjects;

        SDL::Video::update_rect($app, 0, 0, $width, $height);

        $time = $app->ticks;
      });

  loop;

};

our @sequencer;

sub audio_callback {
  my ($int_size, $len, $streamref) = @_;

  my $now = $app->ticks;

  while (my $message = shift @timer_to_audio) {
    # get rid of shared object...
    my %local_message = %{$message};
    push @sequencer, Tecla::Sound->new(\%local_message);
  }

  @sequencer =
    grep { $_ }
    (sort { $b->{started} <=> $a->{started} }
     grep { $_->{started} + $_->{duration} > $now } @sequencer)[0..10];


  return unless @sequencer;
  my $count = scalar @sequencer;

  for (my $i = 0; $i < $len; $i++) {
    use bytes;

    my $val = 0;

    for my $self (@sequencer) {

      my $offset =  $self->{played_samples} -
        (int($self->{played_samples} / $self->{wave_samples})*$self->{wave_samples});

      my $degrees = 360 * (($offset+$i) / $self->{wave_samples});
      my $sin = sin($degrees * 1/180);

      my $amplitude = 1;

      $val += $amplitude * $sin;

      $self->{played_samples} += $len;

    }

    $val = -1 if $val < -1;
    $val = 1 if $val > 1;
    $val = ($val+1)/2;

    substr($$streamref, $i, 1, chr(int($val*80)));

  }

}

sub setup_audio {
  my $desired = SDL::AudioSpec->new;
  my $obtained = SDL::AudioSpec->new;
  $desired->freq ( 22500 );
  $desired->format ( AUDIO_U8 );
  $desired->samples ( 2048 );
  $desired->callback( 'main::audio_callback'); #canno
  $desired->channels( 1 );

  die('AudioMixer, Unable to open audio: '.SDL::get_error."\n" ) if ( SDL::Audio::open($desired, $obtained) < 0 );

  SDL::Audio::pause(0);
}

setup_audio();

$thr->join();
exit;

package Tecla::Object;
use strict;
use warnings;
use base 'Class::Accessor';

BEGIN {
  __PACKAGE__->mk_accessors(qw(rect started duration time_to_live
                               start_color color freq));
}

sub new {
  my $self = shift;
  $self = $self->SUPER::new(@_);

  my %message :shared;
  $message{started} = $self->started;
  $message{duration} = $self->duration;
  $message{freq} = $self->freq;
  push @timer_to_audio, \%message;

  return $self;
}

sub time_lapse {
  my ($self, $oldtime, $now) = @_;
  $self->time_to_live(($self->started + $self->duration) - $now);
  if ($self->time_to_live > 0) {
    my $percent = $self->time_to_live / $self->duration;
    $self->color
      ( SDL::Video::map_RGB($app->format(),
        ( $self->start_color->r * $percent,
          $self->start_color->g * $percent,
          $self->start_color->b * $percent )));
    return 1;
  } else {
    return 0;
  }
}

sub draw {
  my $self = shift;
  SDL::Video::fill_rect($app, $self->rect, $self->color);
  return 1;
}

package Tecla::Sound;
use strict;
use warnings;
use base 'Class::Accessor';

BEGIN {
  __PACKAGE__->mk_accessors(qw(started duration freq
                               wave_samples played_samples));
}

sub new {
  my $self = shift;
  $self = $self->SUPER::new(@_);


  my $wave_duration = 1 / $self->freq;
  $self->wave_samples(22500 * ($wave_duration));
  $self->played_samples(0);

  return $self;
}


1;

