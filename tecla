#!/usr/bin/perl

use strict;
use warnings;
use utf8;
use 5.01000;

# we shouldn't use SDL::Timer, because it starts a different thread,
# and the SDL binding doesn't take care of that...
use Time::HiRes;
use Event qw<loop unloop>;

use SDL 2.3;
use SDL::Color;
use SDL::App;
use SDL::Event;
use SDL::Events;
use SDL::Mouse;

our $FPS = 40;
our $width = 1280;
our $height = 800;
our @objects;

our $app = SDL::App->new
  ( -width => $width,
    -height => $height,
    -depth => 16,
    -resizeable => 1,
    -title => 'Tecla',
  #  -fullscreen => 1
  );

our $bg_color = SDL::Video::map_RGB($app->format(), 0, 0, 0);

SDL::Mouse::show_cursor(0);

sub audio_callback {
  my ($stream, $len) = @_;
  warn 'audio...';
  for my $p (0..$len) {
    $stream->[$p] = 0;
  }
}

our $time = $app->ticks;
our $sevent = SDL::Event->new;
our $timer = Event->timer
  ( interval => (1/$FPS),
    cb => sub {
      my $oldtime = $time;
      my $now = $app->ticks;

      while (SDL::Events::poll_event($sevent)) {
        my $type = $sevent->type;
        if ($type == SDL_QUIT()) {
          unloop;
        } elsif ($type == SDL_KEYDOWN() &&
                 $sevent->key_sym() == SDLK_ESCAPE) {
          unloop;
        } elsif ($type == SDL_KEYDOWN() &&
                 $sevent->key_sym() == SDLK_F11) {
          SDL::Video::wm_toggle_fullscreen($app);
        } elsif ($type == SDL_VIDEORESIZE()) {
          $app->resize($sevent->resize_w, $sevent->resize_h);
          $height = $app->height;
          $width = $app->width;
        } else {
          my $x = int(rand($width));
          my $y = int(rand($height));
          my $r = int(rand(255));
          my $g = int(rand(255));
          my $b = int(rand(255));
          my $s = int(rand(20))+20;
          my $t = int(rand(1700))+300;

          my $tone = int(rand(24))-12; # produce one octave higher and
                                       # one lower than the base
          my $freq = 440 *             # start on A4
            ((2 ** (1/12)) ** $tone);  # formula took from:
          # http://www.phy.mtu.edu/~suits/NoteFreqCalcs.html

          push @objects, Tecla::Object->new
            ({ rect => SDL::Rect->new($x, $y, $s, $s),
               start_color => SDL::Color->new($r, $g, $b),
               started => $time,
               duration => $t,
               freq => $freq });
        }
      }


      @objects = grep { $_->time_lapse($oldtime,$now) } @objects;

      my $rect = SDL::Rect->new(0, 0, $width, $height);

      SDL::Video::fill_rect($app, $rect, $bg_color);

      $_->draw() for @objects;

      SDL::Video::update_rect($app, 0, 0, $width, $height);

      $time = $app->ticks;
    });

loop;

exit;

package Tecla::Object;
use strict;
use warnings;
use base 'Class::Accessor';

BEGIN {
  __PACKAGE__->mk_accessors(qw(rect started duration time_to_live
                               start_color color freq audio));
}

sub new {
  my $self = shift;
  $self = $self->SUPER::new(@_);
  return $self;
}

sub time_lapse {
  my ($self, $oldtime, $now) = @_;
  $self->time_to_live(($self->started + $self->duration) - $now);
  if ($self->time_to_live > 0) {
    my $percent = $self->time_to_live / $self->duration;
    $self->color
      ( SDL::Video::map_RGB($app->format(),
        ( $self->start_color->r * $percent,
          $self->start_color->g * $percent,
          $self->start_color->b * $percent )));
    return 1;
  } else {
    return 0;
  }
}

sub draw {
  my $self = shift;
  SDL::Video::fill_rect($app, $self->rect, $self->color);
}

1;

